name: Generate Protobuf

on:
  push:
    branches:
      - main  # Only trigger on pushes to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install Protocol Buffers Compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install Go Protobuf Plugin
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          export PATH="$PATH:$(go env GOPATH)/bin"

      - name: Get the current version from Git tags
        id: versioning
        run: |
          git fetch --tags
          VERSION=$(git tag --sort=-creatordate | head -n 1 || echo "v0.0.0")
          VERSION_NUMBER=${VERSION:1}
          MAJOR=$(echo $VERSION_NUMBER | cut -d. -f1)
          MINOR=$(echo $VERSION_NUMBER | cut -d. -f2)
          PATCH=$(echo $VERSION_NUMBER | cut -d. -f3)
          PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo $NEW_VERSION
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Generate Go Code from Protobuf
        run: |
          # Extract service name and version from the latest tag
          SERVICE_NAME="user_service"
          OUTPUT_DIR="generated/go/${SERVICE_NAME}-${{ env.NEW_VERSION }}"

          # Create output directory and generate code
          mkdir -p "$OUTPUT_DIR"
          protoc -I=protos/ --go_out="$OUTPUT_DIR" --go-grpc_out="$OUTPUT_DIR" protos/*.proto

      - name: Create and push new tag
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
          NEW_TAG: ${{ env.NEW_VERSION }}
        run: |
          # Set Git user details
          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor }}

          # Create and push the new tag
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Commit and Push Generated Code
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
          NEW_TAG: ${{ env.NEW_VERSION }}
        run: |
          git config --global user.name ${{ github.actor }}
          git config --global user.email ${{ github.actor }}
          git add .
          git diff --cached --exit-code || git commit -m "Auto-generate protobuf code for $NEW_TAG"
          git push origin main
